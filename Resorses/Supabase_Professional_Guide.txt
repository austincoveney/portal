SUPABASE PROFESSIONAL GUIDE - FREE TIER SETUP AND BEST PRACTICES
=================================================================

This comprehensive guide covers professional Supabase usage for free tier accounts, including setup, user authentication, roles, and best practices.


1. SUPABASE OVERVIEW
===================

Supabase is an open-source Backend-as-a-Service (BaaS) platform built on PostgreSQL. It provides:
- Full PostgreSQL database with postgres-level access
- Real-time data synchronization
- Built-in authentication system
- File storage with CDN
- Edge functions (serverless)
- Auto-scaling infrastructure
- Row Level Security (RLS) for authorization


2. FREE TIER LIMITATIONS AND QUOTAS
===================================

The free tier includes:

DATABASE:
- 500 MB database storage per project
- 200 concurrent connections
- Automatic pausing after 1 week of inactivity
- No automatic backups
- 1 hour audit trail retention

AUTHENTICATION:
- 50,000 Monthly Active Users (MAUs)
- Unlimited total users
- Anonymous sign-ins supported
- Social OAuth providers included
- Basic Multi-Factor Authentication (TOTP)
- Custom SMTP server support
- Supabase branding in emails (cannot be removed)

STORAGE:
- 1 GB file storage
- 50 MB maximum file upload size
- Basic CDN (not Smart CDN)
- No image transformations

REALTIME:
- 2 million messages per month
- 200 concurrent peak connections
- 250 KB maximum message size

EDGE FUNCTIONS:
- 500,000 invocations per month

BANDWIDTH:
- 5 GB egress (outbound data transfer)

PROJECT LIMITS:
- 2 free projects maximum per account
- Projects pause after 1 week of inactivity
- Community support only


3. PROJECT SETUP AND INITIALIZATION
===================================

3.1 Creating a New Project
--------------------------
1. Sign up at https://supabase.com
2. Create a new project from the dashboard
3. Choose a project name, database password, and region
4. Wait for project initialization (usually 2-3 minutes)

3.2 Local Development Setup
---------------------------
For professional development, use local development with the Supabase CLI:

1. Install Supabase CLI:
   - macOS: `brew install supabase/tap/supabase`
   - Windows: `scoop bucket add supabase https://github.com/supabase/scoop-bucket.git && scoop install supabase`

2. Initialize local project:
   ```
   mkdir my-project
   cd my-project
   supabase init
   ```

3. Link to remote project:
   ```
   supabase login
   supabase link --project-ref <project-id>
   ```

4. Start local development:
   ```
   supabase start
   ```

3.3 Database Schema Management
------------------------------
Use migrations for professional schema management:

1. Create migration files:
   ```
   supabase migration new create_users_table
   ```

2. Write SQL in migration files:
   ```sql
   create table public.users (
     id uuid references auth.users on delete cascade primary key,
     email text unique not null,
     full_name text,
     avatar_url text,
     created_at timestamptz default now(),
     updated_at timestamptz default now()
   );
   ```

3. Apply migrations:
   ```
   supabase db reset
   ```

4. Deploy to production:
   ```
   supabase db push
   ```


4. AUTHENTICATION SETUP
=======================

4.1 Basic Email/Password Authentication
---------------------------------------
Supabase provides built-in authentication with the auth.users table:

1. Enable email authentication in Dashboard > Authentication > Settings
2. Configure email templates if needed
3. Set up redirect URLs for your application

4.2 Social Authentication
------------------------
Configure OAuth providers:

1. Go to Dashboard > Authentication > Providers
2. Enable desired providers (Google, GitHub, etc.)
3. Add client ID and secret from OAuth provider
4. Configure redirect URLs

Example configuration in supabase/config.toml:
```toml
[auth.external.github]
enabled = true
client_id = "env(SUPABASE_AUTH_GITHUB_CLIENT_ID)"
secret = "env(SUPABASE_AUTH_GITHUB_SECRET)"
redirect_uri = "http://localhost:54321/auth/v1/callback"
```

4.3 Multi-Factor Authentication
-------------------------------
Free tier includes basic TOTP MFA:

1. Enable in Dashboard > Authentication > Settings
2. Configure TOTP settings
3. Implement MFA enrollment in your application


5. USER ROLES AND AUTHORIZATION
===============================

5.1 Understanding Supabase Auth Roles
-------------------------------------
Supabase uses two built-in roles:
- `anon`: Unauthenticated users
- `authenticated`: Logged-in users

Custom roles are implemented through:
1. Custom user metadata
2. Database tables for role management
3. Row Level Security (RLS) policies

5.2 Implementing Custom User Roles
----------------------------------

Create a roles system:

```sql
-- Create roles table
create table public.roles (
  id uuid default gen_random_uuid() primary key,
  name text unique not null,
  description text,
  created_at timestamptz default now()
);

-- Create user_roles junction table
create table public.user_roles (
  id uuid default gen_random_uuid() primary key,
  user_id uuid references auth.users(id) on delete cascade,
  role_id uuid references public.roles(id) on delete cascade,
  created_at timestamptz default now(),
  unique(user_id, role_id)
);

-- Insert default roles
insert into public.roles (name, description) values
  ('admin', 'Full system access'),
  ('user', 'Standard user access'),
  ('moderator', 'Content moderation access');
```

5.3 Row Level Security (RLS) Implementation
-------------------------------------------
RLS is crucial for data security in Supabase:

1. Enable RLS on tables:
```sql
alter table public.users enable row level security;
```

2. Create policies for different operations:
```sql
-- Users can read their own data
create policy "Users can view own profile" on public.users
  for select using (auth.uid() = id);

-- Users can update their own data
create policy "Users can update own profile" on public.users
  for update using (auth.uid() = id);

-- Only authenticated users can insert
create policy "Authenticated users can insert" on public.users
  for insert with check (auth.role() = 'authenticated');
```

3. Role-based policies:
```sql
-- Function to check user role
create or replace function public.has_role(required_role text)
returns boolean as $$
begin
  return exists (
    select 1 from public.user_roles ur
    join public.roles r on ur.role_id = r.id
    where ur.user_id = auth.uid() and r.name = required_role
  );
end;
$$ language plpgsql security definer;

-- Admin-only access policy
create policy "Admin access" on public.sensitive_table
  for all using (public.has_role('admin'));
```


6. DATABASE BEST PRACTICES
==========================

6.1 Table Design
----------------
1. Always use primary keys (preferably UUID)
2. Include created_at and updated_at timestamps
3. Use appropriate data types
4. Add proper constraints and indexes
5. Follow naming conventions (snake_case)

Example table structure:
```sql
create table public.posts (
  id uuid default gen_random_uuid() primary key,
  title text not null,
  content text,
  author_id uuid references auth.users(id) on delete cascade,
  published boolean default false,
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

-- Add indexes for performance
create index posts_author_id_idx on public.posts(author_id);
create index posts_published_idx on public.posts(published) where published = true;
```

6.2 Security Best Practices
---------------------------
1. Enable RLS on all public tables
2. Create specific policies for each operation
3. Use security definer functions for complex logic
4. Never expose sensitive data in policies
5. Regularly audit your policies

6.3 Performance Optimization
----------------------------
1. Add appropriate indexes
2. Use partial indexes where applicable
3. Optimize queries with EXPLAIN ANALYZE
4. Use database functions for complex operations
5. Implement proper pagination


7. STORAGE MANAGEMENT
====================

7.1 File Upload Setup
---------------------
1. Create storage buckets in Dashboard > Storage
2. Configure bucket policies for access control
3. Set up RLS policies for storage objects

Example bucket policy:
```sql
-- Allow authenticated users to upload files
create policy "Authenticated users can upload" on storage.objects
  for insert with check (auth.role() = 'authenticated');

-- Users can access their own files
create policy "Users can access own files" on storage.objects
  for select using (auth.uid()::text = (storage.foldername(name))[1]);
```

7.2 File Organization
--------------------
1. Use user ID as folder structure: `user_id/file_name`
2. Implement file type validation
3. Set appropriate file size limits
4. Use meaningful file names


8. REAL-TIME FEATURES
====================

8.1 Setting Up Realtime
-----------------------
1. Enable realtime on specific tables:
```sql
alter publication supabase_realtime add table public.messages;
```

2. Configure RLS for realtime:
```sql
create policy "Users can subscribe to own messages" on public.messages
  for select using (auth.uid() = user_id);
```

8.2 Client Implementation
-------------------------
Subscribe to changes in your application:
```javascript
const subscription = supabase
  .channel('messages')
  .on('postgres_changes', {
    event: '*',
    schema: 'public',
    table: 'messages'
  }, (payload) => {
    console.log('Change received!', payload)
  })
  .subscribe()
```


9. MONITORING AND MAINTENANCE
============================

9.1 Usage Monitoring
-------------------
1. Regularly check Dashboard > Settings > Usage
2. Monitor database size and connection usage
3. Track authentication usage
4. Watch storage and bandwidth consumption

9.2 Performance Monitoring
-------------------------
1. Use Dashboard > Logs to monitor queries
2. Check slow query logs
3. Monitor API response times
4. Set up alerts for quota limits

9.3 Backup Strategy
------------------
Since free tier has no automatic backups:
1. Regularly export data using pg_dump
2. Store schema migrations in version control
3. Document manual backup procedures
4. Consider upgrading to Pro for automatic backups


10. SCALING CONSIDERATIONS
=========================

10.1 When to Upgrade
-------------------
Consider upgrading to Pro ($25/month) when:
- Database size approaches 500MB
- Need more than 50,000 MAUs
- Require automatic backups
- Need faster support response
- Projects are pausing due to inactivity

10.2 Optimization Strategies
---------------------------
1. Implement efficient queries
2. Use database functions for complex operations
3. Optimize image sizes before upload
4. Implement proper caching strategies
5. Use CDN for static assets


11. SECURITY CHECKLIST
=====================

□ RLS enabled on all public tables
□ Proper authentication policies configured
□ Sensitive data not exposed in policies
□ Regular security audits performed
□ Environment variables used for secrets
□ HTTPS enforced in production
□ Input validation implemented
□ SQL injection prevention measures
□ Rate limiting configured
□ Audit trails monitored


12. TROUBLESHOOTING COMMON ISSUES
=================================

12.1 Authentication Issues
-------------------------
- Check redirect URLs configuration
- Verify email confirmation settings
- Ensure proper CORS configuration
- Check JWT expiration settings

12.2 Database Issues
-------------------
- Monitor connection limits
- Check RLS policy conflicts
- Verify migration order
- Review query performance

12.3 Storage Issues
------------------
- Check file size limits
- Verify bucket policies
- Review CORS settings
- Monitor storage quota


13. USEFUL RESOURCES
===================

- Official Documentation: https://supabase.com/docs
- Community Forum: https://github.com/supabase/supabase/discussions
- Examples Repository: https://github.com/supabase/supabase/tree/master/examples
- Discord Community: https://discord.supabase.com
- YouTube Channel: https://www.youtube.com/c/supabase


CONCLUSION
==========

This guide provides a comprehensive foundation for professional Supabase usage on the free tier. Remember to:

1. Start with local development using the CLI
2. Implement proper authentication and authorization
3. Use RLS for data security
4. Monitor usage to stay within limits
5. Plan for scaling as your application grows

Regular monitoring and following these best practices will ensure a robust, secure, and scalable application foundation using Supabase's free tier.